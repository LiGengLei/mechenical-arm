// Generated by gencpp from file com_win/command_window.msg
// DO NOT EDIT!


#ifndef COM_WIN_MESSAGE_COMMAND_WINDOW_H
#define COM_WIN_MESSAGE_COMMAND_WINDOW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace com_win
{
template <class ContainerAllocator>
struct command_window_
{
  typedef command_window_<ContainerAllocator> Type;

  command_window_()
    : CommandMode()
    , Coordinator()
    , ZeroAxis()
    , Aux_swing()
    , Aux_Home()
    , CtrlValues()
    , CommandEmit(0)
    , ManualSwitch(0)  {
    }
  command_window_(const ContainerAllocator& _alloc)
    : CommandMode(_alloc)
    , Coordinator(_alloc)
    , ZeroAxis(_alloc)
    , Aux_swing(_alloc)
    , Aux_Home(_alloc)
    , CtrlValues(_alloc)
    , CommandEmit(0)
    , ManualSwitch(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _CommandMode_type;
  _CommandMode_type CommandMode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Coordinator_type;
  _Coordinator_type Coordinator;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ZeroAxis_type;
  _ZeroAxis_type ZeroAxis;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Aux_swing_type;
  _Aux_swing_type Aux_swing;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Aux_Home_type;
  _Aux_Home_type Aux_Home;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _CtrlValues_type;
  _CtrlValues_type CtrlValues;

   typedef int8_t _CommandEmit_type;
  _CommandEmit_type CommandEmit;

   typedef int8_t _ManualSwitch_type;
  _ManualSwitch_type ManualSwitch;




  typedef boost::shared_ptr< ::com_win::command_window_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::com_win::command_window_<ContainerAllocator> const> ConstPtr;

}; // struct command_window_

typedef ::com_win::command_window_<std::allocator<void> > command_window;

typedef boost::shared_ptr< ::com_win::command_window > command_windowPtr;
typedef boost::shared_ptr< ::com_win::command_window const> command_windowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::com_win::command_window_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::com_win::command_window_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace com_win

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'com_win': ['/home/lgl/master/mechanical_arm/arm/src/com_win/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::com_win::command_window_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::com_win::command_window_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_win::command_window_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_win::command_window_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_win::command_window_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_win::command_window_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::com_win::command_window_<ContainerAllocator> >
{
  static const char* value()
  {
    return "080fa35438d753e3eb4d759df3a9e3e2";
  }

  static const char* value(const ::com_win::command_window_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x080fa35438d753e3ULL;
  static const uint64_t static_value2 = 0xeb4d759df3a9e3e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::com_win::command_window_<ContainerAllocator> >
{
  static const char* value()
  {
    return "com_win/command_window";
  }

  static const char* value(const ::com_win::command_window_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::com_win::command_window_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string     CommandMode\n\
string     Coordinator\n\
string     ZeroAxis\n\
string     Aux_swing\n\
string     Aux_Home\n\
float64[]  CtrlValues\n\
int8 CommandEmit\n\
int8 ManualSwitch\n\
";
  }

  static const char* value(const ::com_win::command_window_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::com_win::command_window_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CommandMode);
      stream.next(m.Coordinator);
      stream.next(m.ZeroAxis);
      stream.next(m.Aux_swing);
      stream.next(m.Aux_Home);
      stream.next(m.CtrlValues);
      stream.next(m.CommandEmit);
      stream.next(m.ManualSwitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct command_window_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::com_win::command_window_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::com_win::command_window_<ContainerAllocator>& v)
  {
    s << indent << "CommandMode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.CommandMode);
    s << indent << "Coordinator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Coordinator);
    s << indent << "ZeroAxis: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ZeroAxis);
    s << indent << "Aux_swing: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Aux_swing);
    s << indent << "Aux_Home: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Aux_Home);
    s << indent << "CtrlValues[]" << std::endl;
    for (size_t i = 0; i < v.CtrlValues.size(); ++i)
    {
      s << indent << "  CtrlValues[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.CtrlValues[i]);
    }
    s << indent << "CommandEmit: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CommandEmit);
    s << indent << "ManualSwitch: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ManualSwitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COM_WIN_MESSAGE_COMMAND_WINDOW_H
